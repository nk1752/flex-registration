name: register & store

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # callable workflow
  workflow_call:
    inputs:
      bg:
        required: true
        type: string
      env:
        required: true
        type: string

env:
  # Use docker.io for Docker Hub if empty
  RENEW: false

jobs:
  register:
    runs-on: ubuntu-latest
    

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: pull image
        run: |
          docker pull mulesoft/flex-gateway:latest

      # list docker images
      - name: list docker images
        run: |
          docker images

      # check os version on ubuntu
      - name: check os version
        run: |
          cat /etc/os-release

      - name: make directory
        run: |
          mkdir -p temp
          mkdir -p renew
          ls -l

      # docker container run [OPTIONS] IMAGE [COMMAND] [ARG...]
      # Aliases: docker run

      - name: build vars
        id: json
        run: |
          client_id='b95726291f564ae2942ac2c4ecc46311'
          echo "client_id=$client_id" >> $GITHUB_OUTPUT
          client_secret='59dB6D7A84bd442bAfE7422233a82902'
          echo "client_secret=$client_secret" >> $GITHUB_OUTPUT

          org_id='a6ea8ce7-6d5f-41ee-a802-5505e8833854'
          echo "org_id=$org_id" >> $GITHUB_OUTPUT
          env_id='2c6f18bb-03e2-4874-a489-7216df5b5bc2'
          echo "env_id=$env_id" >> $GITHUB_OUTPUT

      - name: register
        run: |
          flex_name="nadeem-test-1"

          echo "client_id=${{steps.json.outputs.client_id}}"
          echo "client_secret=${{steps.json.outputs.client_secret}}"
          echo "org_id=${{steps.json.outputs.org_id}}"
          echo "env_id=${{steps.json.outputs.env_id}}"

          docker run --entrypoint flexctl \
            -v "$(pwd)/temp":/registration -u $UID mulesoft/flex-gateway \
            registration create \
            --client-id=$${{steps.json.outputs.client_id}} \
            --client-secret=${{steps.json.outputs.client_secret}} \
            --environment=${{steps.json.outputs.env_id}} \
            --connected=true \
            --organization=${{steps.json.outputs.org_id}} \
            --output-directory=/registration \
            $flex_name
            

      - name: list files
        run: |
          ls -l

      - name: push to Artifactory
        run: |
          cat temp/registration.yaml
          # zip registration.yaml
          zip -r registration.zip temp/registration.yaml
          ls -l

      - name: wait
        run: |
          sleep 5

      # inspect registration.yaml
      - name: inspection
        run: |
          sudo docker run --entrypoint flexctl \
            -v "$(pwd)/temp":/registration \
            -u $UID mulesoft/flex-gateway \
            registration inspect --file=/registration/registration.yaml > reg-date.yaml

      - name: renew
        run: |
          sudo docker run --entrypoint flexctl \
            -v "$(pwd)":/renew \
            -v "$(pwd)/temp":/registration \
            -u $UID mulesoft/flex-gateway \
            registration renew \
            --client-id=b95726291f564ae2942ac2c4ecc46311 \
            --client-secret=59dB6D7A84bd442bAfE7422233a82902 \
            --output-directory=/renew \
            /registration/registration.yaml

      - name: push new registration to Artifactory
        run: |
          cat registration.yaml
          # zip registration.yaml
          zip -r registration-new.zip registration.yaml
          ls -l
          
                      

      
